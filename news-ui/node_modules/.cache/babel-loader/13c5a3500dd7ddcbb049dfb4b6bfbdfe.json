{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\n\nvar AsapAction = function (_super) {\n  __extends(AsapAction, _super);\n\n  function AsapAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    scheduler.actions.push(this);\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  };\n\n  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    var _a;\n\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay != null ? delay > 0 : this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n\n    var actions = scheduler.actions;\n\n    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n\n    return undefined;\n  };\n\n  return AsapAction;\n}(AsyncAction);\n\nexport { AsapAction };","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,eAA5B;AAGA,SAASC,iBAAT,QAAkC,qBAAlC;;AAGA;EAAmCC;;EACjC,oBAAsBC,SAAtB,EAA0DC,IAA1D,EAA6G;IAA7G,YACEC,kBAAMF,SAAN,EAAiBC,IAAjB,KAAsB,IADxB;;IAAsBE;IAAoCA;;EAEzD;;EAESC,sCAAV,UAAyBJ,SAAzB,EAAmDK,EAAnD,EAAqEC,KAArE,EAAsF;IAAjB;MAAAA;IAAiB;;IAEpF,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,GAAG,CAA9B,EAAiC;MAC/B,OAAOJ,iBAAMK,cAAN,CAAoBC,IAApB,CAAoB,IAApB,EAAqBR,SAArB,EAAgCK,EAAhC,EAAoCC,KAApC,CAAP;IACD;;IAEDN,SAAS,CAACS,OAAV,CAAkBC,IAAlB,CAAuB,IAAvB;IAIA,OAAOV,SAAS,CAACW,UAAV,KAAyBX,SAAS,CAACW,UAAV,GAAuBb,iBAAiB,CAACc,YAAlB,CAA+BZ,SAAS,CAACa,KAAV,CAAgBC,IAAhB,CAAqBd,SAArB,EAAgCe,SAAhC,CAA/B,CAAhD,CAAP;EACD,CAXS;;EAaAX,sCAAV,UAAyBJ,SAAzB,EAAmDK,EAAnD,EAAqEC,KAArE,EAAsF;;;IAAjB;MAAAA;IAAiB;;IAIpF,IAAIA,KAAK,IAAI,IAAT,GAAgBA,KAAK,GAAG,CAAxB,GAA4B,KAAKA,KAAL,GAAa,CAA7C,EAAgD;MAC9C,OAAOJ,iBAAMc,cAAN,CAAoBR,IAApB,CAAoB,IAApB,EAAqBR,SAArB,EAAgCK,EAAhC,EAAoCC,KAApC,CAAP;IACD;;IAIO,WAAO,GAAKN,SAAS,QAArB;;IACR,IAAIK,EAAE,IAAI,IAAN,IAAc,cAAO,CAACI,OAAO,CAACQ,MAAR,GAAiB,CAAlB,CAAP,MAA2B,IAA3B,IAA2BC,aAA3B,GAA2B,MAA3B,GAA2BA,GAAEb,EAA7B,MAAoCA,EAAtD,EAA0D;MACxDP,iBAAiB,CAACqB,cAAlB,CAAiCd,EAAjC;MACAL,SAAS,CAACW,UAAV,GAAuBI,SAAvB;IACD;;IAED,OAAOA,SAAP;EACD,CAjBS;;EAkBZ;AAAC,CApCD,CAAmClB,WAAnC","names":["AsyncAction","immediateProvider","__extends","scheduler","work","_super","_this","AsapAction","id","delay","requestAsyncId","call","actions","push","_scheduled","setImmediate","flush","bind","undefined","recycleAsyncId","length","_a","clearImmediate"],"sources":["D:\\News-App-capstone\\news-ui\\node_modules\\rxjs\\src\\internal\\scheduler\\AsapAction.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\nimport { immediateProvider } from './immediateProvider';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsapAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AsapScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: TimerHandle, delay: number = 0): TimerHandle {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  }\n\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: TimerHandle, delay: number = 0): TimerHandle | undefined {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if (delay != null ? delay > 0 : this.delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue has no remaining actions with the same async id,\n    // cancel the requested microtask and set the scheduled flag to undefined\n    // so the next AsapAction will request its own.\n    const { actions } = scheduler;\n    if (id != null && actions[actions.length - 1]?.id !== id) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}