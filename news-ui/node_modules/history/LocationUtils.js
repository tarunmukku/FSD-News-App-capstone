'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var looseEqual = function looseEqual(a, b) {
  if (a == null) return a == b;

  var typeofA = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var typeofB = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (typeofA !== typeofB) return false;

  if (Array.isArray(a)) {
    if (!Array.isArray(b) || a.length !== b.length) return false;

    return a.every(function (item, index) {
      return looseEqual(item, b[index]);
    });
  } else if (typeofA === 'object') {
    var keysOfA = Object.keys(a);
    var keysOfB = Object.keys(b);

    if (keysOfA.length !== keysOfB.length) return false;

    return keysOfA.every(function (key) {
      return looseEqual(a[key], b[key]);
    });
  }

  return a === b;
};

var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
  return a.path === b.path && a.key === b.key && looseEqual(a.state, b.state);
};